name: target-matrix-example

on:
  push:
    # Prevent duplicate runs of this workflow on our own internal PRs.
    branches:
      - main
      - next/*
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main
      - next/*

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.define.outputs.include }}
    steps:
      - name: Define Cross-Compilation Target Matrix
        id: define
        uses: dherman/target-matrix@v0.0.2
        with:
          toolchain: rust
          windows-latest: x86_64-pc-windows-msvc
          macos-latest: x86_64-apple-darwin
          ubuntu-latest: x86_64-unknown-linux-gnu x86_64-unknown-freebsd

  build:
    needs: matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.include) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install cross-rs
        run: cargo install cross
      - name: Build Artifact
        run: cross build --target ${{ matrix.target }} --message-format=json-render-diagnostics | jq -r 'select(.reason=="compiler-artifact" and .target.name=="super-duper-adder").filenames[0]' > artifact.log
      - name: Create unix tarball
        if: not(startsWith(matrix.os, 'windows'))
        run: |
          mkdir dist
          cp $(cat artifact.log) .
          tar czf "$(basename $(cat artifact.log)).tgz" "$(basename $(cat artifact.log))"
          rm "$(basename $(cat artifact.log))"
          mv "$(basename $(cat artifact.log)).tgz" dist
          ls -al dist
